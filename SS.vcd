$date
	Sun Aug 24 23:16:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Stage_tb $end
$scope module Single_Stage_Top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # stall $end
$var wire 64 $ WRITE_DATA [63:0] $end
$var wire 1 % SUB $end
$var wire 1 & RegWrite $end
$var wire 64 ' READ_DATA2 [63:0] $end
$var wire 64 ( READ_DATA1 [63:0] $end
$var wire 64 ) PC_NEXT_REG [63:0] $end
$var wire 64 * PC_NEXT_IMM [63:0] $end
$var wire 64 + PC_NEXT [63:0] $end
$var wire 64 , PC_CURR [63:0] $end
$var wire 1 - MemtoReg $end
$var wire 1 . MemWrite $end
$var wire 1 / MemRead $end
$var wire 2 0 Imm_Src [1:0] $end
$var wire 32 1 INSTRUCTION_BUS [31:0] $end
$var wire 64 2 IMM_OUT [63:0] $end
$var wire 64 3 ID_EX_READ_DATA2_IMM [63:0] $end
$var wire 2 4 Forward_B [1:0] $end
$var wire 2 5 Forward_A [1:0] $end
$var wire 64 6 DMEM_READ_DATA [63:0] $end
$var wire 1 7 Branch $end
$var wire 1 8 ALU_ZERO $end
$var wire 64 9 ALU_OUT [63:0] $end
$var wire 1 : ALU_CARRY $end
$var wire 64 ; ALU_B [63:0] $end
$var wire 64 < ALU_A [63:0] $end
$var wire 1 = ALUSrc $end
$var wire 3 > ALUOp [2:0] $end
$var wire 3 ? ALUCONTROL [2:0] $end
$var reg 64 @ EX_MEM_ALU_OUT [63:0] $end
$var reg 1 A EX_MEM_Branch $end
$var reg 5 B EX_MEM_INSTRUCTION_11_7 [4:0] $end
$var reg 1 C EX_MEM_MemRead $end
$var reg 1 D EX_MEM_MemWrite $end
$var reg 1 E EX_MEM_MemtoReg $end
$var reg 64 F EX_MEM_PC_NEXT_IMM [63:0] $end
$var reg 64 G EX_MEM_READ_DATA_2 [63:0] $end
$var reg 1 H EX_MEM_RegWrite $end
$var reg 1 I EX_MEM_zero $end
$var reg 3 J ID_EX_ALUOp [2:0] $end
$var reg 1 K ID_EX_ALUSrc $end
$var reg 1 L ID_EX_Branch $end
$var reg 64 M ID_EX_IMM_OUT [63:0] $end
$var reg 5 N ID_EX_INSTRUCTION_11_7 [4:0] $end
$var reg 5 O ID_EX_INSTRUCTION_19_15 [4:0] $end
$var reg 5 P ID_EX_INSTRUCTION_24_20 [4:0] $end
$var reg 4 Q ID_EX_INSTRUCTION_30_14_12 [3:0] $end
$var reg 7 R ID_EX_INSTRUCTION_OPCODE [6:0] $end
$var reg 1 S ID_EX_MemRead $end
$var reg 1 T ID_EX_MemWrite $end
$var reg 1 U ID_EX_MemtoReg $end
$var reg 64 V ID_EX_PC_CURR [63:0] $end
$var reg 64 W ID_EX_READ_DATA1 [63:0] $end
$var reg 64 X ID_EX_READ_DATA2 [63:0] $end
$var reg 1 Y ID_EX_RegWrite $end
$var reg 32 Z IF_ID_INSTRUCTION_BUS [31:0] $end
$var reg 64 [ IF_ID_PC_CURR [63:0] $end
$var reg 64 \ MEM_WB_ALU_OUT [63:0] $end
$var reg 64 ] MEM_WB_DMEM_READ_DATA [63:0] $end
$var reg 5 ^ MEM_WB_INSTRUCTION_11_7 [4:0] $end
$var reg 1 _ MEM_WB_MemtoReg $end
$var reg 1 ` MEM_WB_RegWrite $end
$scope module ALU $end
$var wire 64 a A_and_B [63:0] $end
$var wire 64 b A_xor_B [63:0] $end
$var wire 64 c B_comp [63:0] $end
$var wire 64 d sum [63:0] $end
$var wire 1 8 zero $end
$var wire 1 % sub $end
$var wire 1 : Carry_out $end
$var wire 64 e Carry_intermediate [63:0] $end
$var wire 64 f B [63:0] $end
$var wire 64 g A_xor_B_and_cin [63:0] $end
$var wire 3 h ALU_Sel [2:0] $end
$var wire 64 i A [63:0] $end
$var reg 64 j ALU_Out [63:0] $end
$upscope $end
$scope module ALU_Mux_A $end
$var wire 64 k a [63:0] $end
$var wire 64 l c [63:0] $end
$var wire 64 m d [63:0] $end
$var wire 64 n y [63:0] $end
$var wire 2 o s [1:0] $end
$var wire 64 p b [63:0] $end
$upscope $end
$scope module ALU_Mux_B $end
$var wire 64 q c [63:0] $end
$var wire 64 r d [63:0] $end
$var wire 64 s y [63:0] $end
$var wire 2 t s [1:0] $end
$var wire 64 u b [63:0] $end
$var wire 64 v a [63:0] $end
$upscope $end
$scope module Imm_Gen $end
$var wire 32 w imm_in [31:0] $end
$var wire 2 x imm_src [1:0] $end
$var wire 64 y imm_out [63:0] $end
$upscope $end
$scope module Imm_Sel $end
$var wire 64 z a [63:0] $end
$var wire 64 { b [63:0] $end
$var wire 1 K s $end
$var wire 64 | c [63:0] $end
$upscope $end
$scope module PC_Adder_Imm $end
$var wire 64 } a [63:0] $end
$var wire 64 ~ b [63:0] $end
$var wire 64 !" c [63:0] $end
$upscope $end
$scope module PC_Adder_Regular $end
$var wire 64 "" b [63:0] $end
$var wire 64 #" c [63:0] $end
$var wire 64 $" a [63:0] $end
$upscope $end
$scope module PC_Update_Mux $end
$var wire 64 %" a [63:0] $end
$var wire 64 &" b [63:0] $end
$var wire 1 '" s $end
$var wire 64 (" c [63:0] $end
$upscope $end
$scope module PC_block $end
$var wire 64 )" PC_NEXT [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # stall $end
$var reg 64 *" PC [63:0] $end
$upscope $end
$scope module Write_Back_Mux $end
$var wire 64 +" a [63:0] $end
$var wire 64 ," b [63:0] $end
$var wire 1 _ s $end
$var wire 64 -" c [63:0] $end
$upscope $end
$scope module control_unit_alu $end
$var wire 3 ." ALUOp [2:0] $end
$var wire 4 /" funct [3:0] $end
$var wire 1 0" funct7_5 $end
$var wire 3 1" funct3 [2:0] $end
$var reg 3 2" ALUControl [2:0] $end
$var reg 1 % sub $end
$upscope $end
$scope module control_unit_main $end
$var wire 7 3" opcode [6:0] $end
$var wire 1 & RegWrite $end
$var wire 1 - MemtoReg $end
$var wire 1 . MemWrite $end
$var wire 1 / MemRead $end
$var wire 2 4" Imm_Src [1:0] $end
$var wire 1 7 Branch $end
$var wire 1 = ALUSrc $end
$var wire 3 5" ALUOp [2:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 C MemRead $end
$var wire 1 D MemWrite $end
$var wire 64 6" WriteData [63:0] $end
$var wire 64 7" address [63:0] $end
$var wire 1 " rst $end
$var wire 1 I zero $end
$var wire 64 8" ReadData [63:0] $end
$var integer 32 9" fd [31:0] $end
$var integer 32 :" i [31:0] $end
$upscope $end
$scope module forwarding_unit $end
$var wire 5 ;" EX_MEM_RD [4:0] $end
$var wire 1 H EX_MEM_RegWrite $end
$var wire 5 <" ID_EX_RS1 [4:0] $end
$var wire 5 =" ID_EX_RS2 [4:0] $end
$var wire 5 >" MEM_WB_RD [4:0] $end
$var wire 1 ` MEM_WB_RegWrite $end
$var wire 2 ?" Forward_B [1:0] $end
$var wire 2 @" Forward_A [1:0] $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 1 7 branch $end
$var wire 1 S mem_read_1 $end
$var wire 1 C mem_read_2 $end
$var wire 7 A" opcode [6:0] $end
$var wire 5 B" rd [4:0] $end
$var wire 5 C" rs1 [4:0] $end
$var wire 5 D" rs2 [4:0] $end
$var wire 1 # stall $end
$upscope $end
$scope module instruction_memory $end
$var wire 64 E" PC [63:0] $end
$var wire 1 " rst $end
$var wire 32 F" instruction [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 5 G" ReadReg1 [4:0] $end
$var wire 5 H" ReadReg2 [4:0] $end
$var wire 1 ` RegWrite $end
$var wire 64 I" WriteData [63:0] $end
$var wire 5 J" WriteReg [4:0] $end
$var wire 1 " rst $end
$var wire 64 K" ReadData2 [63:0] $end
$var wire 64 L" ReadData1 [63:0] $end
$var integer 32 M" fd [31:0] $end
$var integer 32 N" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx N"
bx M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
bx :"
bx 9"
b0 8"
b0 7"
b0 6"
bx 5"
bx 4"
b0 3"
b0 2"
b0 1"
00"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b100 )"
b100 ("
0'"
b0 &"
b100 %"
b0 $"
b100 #"
b100 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
bx x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
0`
0_
b0 ^
b0 ]
b0 \
b0 [
b0 Z
0Y
b0 X
b0 W
b0 V
0U
0T
0S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
0K
b0 J
0I
0H
b0 G
b0 F
0E
0D
0C
b0 B
0A
b0 @
b0 ?
bx >
0=
b0 <
b0 ;
0:
b0 9
18
07
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
bx 0
0/
0.
0-
b0 ,
b100 +
b0 *
b100 )
b0 (
b0 '
1&
0%
b0 $
0#
1"
1!
$end
#50
0!
#100
1!
#150
0!
#200
1!
#250
0!
#300
1!
#350
0!
#400
1!
#450
0!
#500
x:
bx e
bx g
x8
bx b
bx d
bx c
x%
bx ?
bx h
bx 2"
b1000 +
b1000 ("
b1000 )"
1I
bx J
bx ."
1Y
b1000 )
b1000 #"
b1000 %"
b100 ,
b100 $"
b100 *"
b100 E"
b10000000011000110000011 1
b10000000011000110000011 F"
1!
0"
#550
0!
#600
b10 >
b10 5"
1=
b0 0
b0 x
b0 4"
b100 '
b100 K"
b100000000011001000000011 1
b100000000011001000000011 F"
1/
1-
b100 2
b100 y
b1100 +
b1100 ("
b1100 )"
b11 3"
b100 H"
b100 D"
b1100 )
b1100 #"
b1100 %"
b1000 ,
b1000 $"
b1000 *"
b1000 E"
b100 [
b10000000011000110000011 Z
b10000000011000110000011 w
b100 *
b100 !"
b100 V
b100 }
1H
xI
1!
#650
0!
#700
08
0:
b100 d
b0 e
b100 b
b100 c
b0 g
b100 9
b100 j
b100 ;
b100 f
b100 s
bx '
bx K"
b1000 2
b1000 y
b10000011000001001100011 1
b10000011000001001100011 F"
0%
b0 ?
b0 h
b0 2"
b100 3
b100 v
b100 |
b11 1"
b1000 H"
b1000 D"
b10000 +
b10000 ("
b10000 )"
1`
b100 F
b100 &"
1S
1U
b10 J
b10 ."
1K
b1000 V
b1000 }
b100 X
b100 z
b1100 *
b1100 !"
b100 M
b100 r
b100 {
b100 ~
b100 P
b100 ="
b11 Q
b11 /"
b11 N
b11 B"
b11 R
b11 A"
b1000 [
b100000000011001000000011 Z
b100000000011001000000011 w
b10000 )
b10000 #"
b10000 %"
b1100 ,
b1100 $"
b1100 *"
b1100 E"
1!
#750
0!
#800
1#
b1000 9
b1000 j
b1000 d
b100 >
b100 5"
0=
0&
b1000 b
b10 0
b10 x
b10 4"
b11 (
b11 L"
b1000 c
b11000111000010000110011 1
b11000111000010000110011 F"
17
0/
0-
b100 '
b100 K"
b100 2
b100 y
b1000 ;
b1000 f
b1000 s
b11 6
b11 8"
b10100 +
b10100 ("
b10100 )"
b1100011 3"
b11 G"
b100 H"
b11 C"
b100 D"
b1000 3
b1000 v
b1000 |
b10100 )
b10100 #"
b10100 %"
b10000 ,
b10000 $"
b10000 *"
b10000 E"
b1100 [
b10000011000001001100011 Z
b10000011000001001100011 w
b1100 V
b1100 }
bx X
bx z
b10100 *
b10100 !"
b1000 M
b1000 r
b1000 {
b1000 ~
b1000 P
b1000 ="
b100 N
b100 B"
1C
1E
b1100 F
b1100 &"
0I
b100 @
b100 l
b100 q
b100 7"
b100 G
b100 6"
b11 B
b11 ;"
1!
#850
0!
#900
x:
bx e
x8
0#
bx g
bx 0
bx x
bx 4"
1&
b0xxx00000000000xxx0 2
b0xxx00000000000xxx0 y
bx b
bx 9
bx j
bx ;
bx f
bx s
bx d
bx c
bx 3
bx v
bx |
07
b0 >
b0 5"
b10 (
b10 L"
b1001 '
b1001 K"
b11 $
b11 p
b11 u
b11 -"
b11 I"
b100000 N"
b10000000000000000000000000000011 M"
b100 6
b100 8"
1%
b1 ?
b1 h
b1 2"
b110011 3"
b111 G"
b110 H"
b111 C"
b110 D"
1_
b11 ]
b11 ,"
b100 \
b100 +"
b11 ^
b11 >"
b11 J"
b10100 F
b10100 &"
b1000 @
b1000 l
b1000 q
b1000 7"
bx G
bx 6"
b100 B
b100 ;"
0S
0U
b0 J
b0 ."
0K
0Y
b10000 [
b11000111000010000110011 Z
b11000111000010000110011 w
1!
#950
0!
#1000
0:
b1011 9
b1011 j
08
b1011 d
b0 e
b1011 b
b1001 c
b0 g
b1100100000001010110011 1
b1100100000001010110011 F"
b0 a
b1001 ;
b1001 f
b1001 s
0%
b0 ?
b0 h
b0 2"
b11000 +
b11000 ("
b11000 )"
b10 <
b10 i
b10 n
b1001 3
b1001 v
b1001 |
b0 1"
b0 6
b0 8"
b100 $
b100 p
b100 u
b100 -"
b100 I"
b100000 N"
b11000 )
b11000 #"
b11000 %"
b10100 ,
b10100 $"
b10100 *"
b10100 E"
1Y
b10000 V
b10000 }
b10 W
b10 k
b1001 X
b1001 z
bx *
bx !"
b0xxx00000000000xxx0 M
b0xxx00000000000xxx0 r
b0xxx00000000000xxx0 {
b0xxx00000000000xxx0 ~
b110 P
b110 ="
b111 O
b111 <"
b0 Q
b0 /"
b1000 N
b1000 B"
b110011 R
b110011 A"
0C
0E
0H
xI
bx @
bx l
bx q
bx 7"
b100 ]
b100 ,"
b1000 \
b1000 +"
b100 ^
b100 >"
b100 J"
1!
#1050
0!
#1100
b100 (
b100 L"
b11 '
b11 K"
b0x00000x00000000xxx 2
b0x00000x00000000xxx y
b110001010000010010010011 1
b110001010000010010010011 F"
bx $
bx p
bx u
bx -"
bx I"
b100 G"
b11 H"
b100 C"
b11 D"
b11100 +
b11100 ("
b11100 )"
0_
0`
b0 ]
b0 ,"
bx \
bx +"
1H
bx F
bx &"
0I
b1011 @
b1011 l
b1011 q
b1011 7"
b1001 G
b1001 6"
b1000 B
b1000 ;"
b10100 V
b10100 }
b10100 [
b1100100000001010110011 Z
b1100100000001010110011 w
b11100 )
b11100 #"
b11100 %"
b11000 ,
b11000 $"
b11000 *"
b11000 E"
1!
#1150
0!
#1200
1=
b111 9
b111 j
b0 0
b0 x
b0 4"
b111 d
b11 c
b11000011011000110100011 1
b11000011011000110100011 F"
b1 >
b1 5"
b1010 (
b1010 L"
bx '
bx K"
b1100 2
b1100 y
b111 b
b11 ;
b11 f
b11 s
b100000 +
b100000 ("
b100000 )"
b10011 3"
b1010 G"
b1100 H"
b1010 C"
b1100 D"
b100 <
b100 i
b100 n
b11 3
b11 v
b11 |
b1011 $
b1011 p
b1011 u
b1011 -"
b1011 I"
b100000 N"
b100000 )
b100000 #"
b100000 %"
b11100 ,
b11100 $"
b11100 *"
b11100 E"
b11000 [
b110001010000010010010011 Z
b110001010000010010010011 w
b11000 V
b11000 }
b100 W
b100 k
b11 X
b11 z
b0x00000x00000000xxx M
b0x00000x00000000xxx r
b0x00000x00000000xxx {
b0x00000x00000000xxx ~
b11 P
b11 ="
b100 O
b100 <"
b101 N
b101 B"
1`
b1011 \
b1011 +"
b1000 ^
b1000 >"
b1000 J"
1!
#1250
0!
#1300
08
b0 g
b1000 e
b10110 9
b10110 j
0&
b10110 d
b1100 c
b11 >
b11 5"
b1 0
b1 x
b1 4"
b1000 a
b110 b
b1100 ;
b1100 f
b1100 s
1.
b11 (
b11 L"
b1001 '
b1001 K"
b11 2
b11 y
bx 1
bx F"
b1010 <
b1010 i
b1010 n
b1100 3
b1100 v
b1100 |
b100011 3"
b11 G"
b110 H"
b11 C"
b110 D"
b100100 +
b100100 ("
b100100 )"
b111 @
b111 l
b111 q
b111 7"
b11 G
b11 6"
b101 B
b101 ;"
b1 J
b1 ."
1K
b11100 V
b11100 }
b1010 W
b1010 k
bx X
bx z
b101000 *
b101000 !"
b1100 M
b1100 r
b1100 {
b1100 ~
b1100 P
b1100 ="
b1010 O
b1010 <"
b1001 N
b1001 B"
b10011 R
b10011 A"
b11100 [
b11000011011000110100011 Z
b11000011011000110100011 w
b100100 )
b100100 #"
b100100 %"
b100000 ,
b100000 $"
b100000 *"
b100000 E"
1!
#1350
0!
#1400
08
x&
b11 e
b110 9
b110 j
bx 0
bx x
bx 4"
x=
bx 2
bx y
b110 d
b11 c
x7
x/
x-
bx >
bx 5"
x.
bx (
bx L"
bx '
bx K"
b11 a
b0 b
b11 ;
b11 f
b11 s
b101000 +
b101000 ("
b101000 )"
bx 3"
bx G"
bx H"
bx C"
bx D"
b11 <
b11 i
b11 n
b11 3
b11 v
b11 |
b11 1"
b111 $
b111 p
b111 u
b111 -"
b111 I"
b100000 N"
b101000 )
b101000 #"
b101000 %"
b100100 ,
b100100 $"
b100100 *"
b100100 E"
b100000 [
bx Z
bx w
b11 J
b11 ."
1T
0Y
b100000 V
b100000 }
b11 W
b11 k
b1001 X
b1001 z
b100011 *
b100011 !"
b11 M
b11 r
b11 {
b11 ~
b110 P
b110 ="
b11 O
b11 <"
b11 Q
b11 /"
b11 N
b11 B"
b100011 R
b100011 A"
b101000 F
b101000 &"
b10110 @
b10110 l
b10110 q
b10110 7"
bx G
bx 6"
b1001 B
b1001 ;"
b111 \
b111 +"
b101 ^
b101 >"
b101 J"
1!
#1450
0!
#1500
x:
x#
bx e
bx g
x8
b0x 4
b0x t
b0x ?"
bx d
bx c
bx a
bx b
b0 9
b0 j
bx ;
bx f
bx s
b0x 5
b0x o
b0x @"
b10110 $
b10110 p
b10110 u
b10110 -"
b10110 I"
b100000 N"
b10000000000 :"
b10000000000000000000000000000011 9"
x%
bx ?
bx h
bx 2"
bx <
bx i
bx n
bx 3
bx v
bx |
bx 1"
x0"
b101100 +
b101100 ("
b101100 )"
b10110 \
b10110 +"
b1001 ^
b1001 >"
b1001 J"
1D
0H
b100011 F
b100011 &"
b110 @
b110 l
b110 q
b110 7"
b1001 G
b1001 6"
b11 B
b11 ;"
xL
xS
xU
bx J
bx ."
xT
xK
xY
b100100 V
b100100 }
bx W
bx k
bx X
bx z
bx *
bx !"
bx M
bx r
bx {
bx ~
bx P
bx ="
bx O
bx <"
bx Q
bx /"
bx N
bx B"
bx R
bx A"
b100100 [
b101100 )
b101100 #"
b101100 %"
b101000 ,
b101000 $"
b101000 *"
b101000 E"
1!
#1550
0!
#1600
bx0 4
bx0 t
bx0 ?"
bx0 5
bx0 o
bx0 @"
bx +
bx ("
bx )"
x'"
b110 $
b110 p
b110 u
b110 -"
b110 I"
b110000 )
b110000 #"
b110000 %"
b101100 ,
b101100 $"
b101100 *"
b101100 E"
b101000 [
b101000 V
b101000 }
xA
xC
xE
xD
xH
bx F
bx &"
xI
b0 @
b0 l
b0 q
b0 7"
bx G
bx 6"
bx B
bx ;"
0`
b110 \
b110 +"
b11 ^
b11 >"
b11 J"
1!
#1650
0!
#1700
bx 4
bx t
bx ?"
bx 5
bx o
bx @"
b0 $
b0 p
b0 u
b0 -"
b0 I"
x_
x`
b0 \
b0 +"
bx ^
bx >"
bx J"
b101100 V
b101100 }
b101100 [
bx )
bx #"
bx %"
bx ,
bx $"
bx *"
bx E"
1!
#1750
0!
#1800
bx [
bx V
bx }
1!
#1850
0!
#1900
1!
#1950
0!
#2000
1!
#2050
0!
#2100
1!
#2150
0!
#2200
1!
#2250
0!
#2300
1!
#2350
0!
#2400
1!
#2450
0!
#2500
1!
#2550
0!
#2600
1!
#2650
0!
#2700
1!
#2750
0!
#2800
1!
#2850
0!
#2900
1!
#2950
0!
#3000
1!
#3050
0!
#3100
1!
#3150
0!
#3200
1!
#3250
0!
#3300
1!
#3350
0!
#3400
1!
#3450
0!
#3500
1!
#3550
0!
#3600
1!
#3650
0!
#3700
1!
#3750
0!
#3800
1!
#3850
0!
#3900
1!
#3950
0!
#4000
1!
#4050
0!
#4100
1!
#4150
0!
#4200
1!
#4250
0!
#4300
1!
#4350
0!
#4400
1!
#4450
0!
#4500
1!
#4550
0!
#4600
1!
#4650
0!
#4700
1!
#4750
0!
#4800
1!
#4850
0!
#4900
1!
#4950
0!
#5000
1!
#5050
0!
#5100
1!
#5150
0!
#5200
1!
#5250
0!
#5300
1!
#5350
0!
#5400
1!
#5450
0!
#5500
1!
#5550
0!
#5600
1!
#5650
0!
#5700
1!
#5750
0!
#5800
1!
#5850
0!
#5900
1!
#5950
0!
#6000
1!
#6050
0!
#6100
1!
#6150
0!
#6200
1!
#6250
0!
#6300
1!
#6350
0!
#6400
1!
#6450
0!
#6500
1!
#6550
0!
#6600
1!
#6650
0!
#6700
1!
#6750
0!
#6800
1!
#6850
0!
#6900
1!
#6950
0!
#7000
1!
#7050
0!
#7100
1!
#7150
0!
#7200
1!
#7250
0!
#7300
1!
#7350
0!
#7400
1!
#7450
0!
#7500
1!
#7550
0!
#7600
1!
#7650
0!
#7700
1!
#7750
0!
#7800
1!
#7850
0!
#7900
1!
#7950
0!
#8000
1!
#8050
0!
#8100
1!
#8150
0!
#8200
1!
#8250
0!
#8300
1!
#8350
0!
#8400
1!
#8450
0!
#8500
1!
#8550
0!
#8600
1!
#8650
0!
#8700
1!
#8750
0!
#8800
1!
#8850
0!
#8900
1!
#8950
0!
#9000
1!
#9050
0!
#9100
1!
#9150
0!
#9200
1!
#9250
0!
#9300
1!
#9350
0!
#9400
1!
#9450
0!
#9500
1!
#9550
0!
#9600
1!
#9650
0!
#9700
1!
#9750
0!
#9800
1!
#9850
0!
#9900
1!
#9950
0!
#10000
1!
#10050
0!
#10100
1!
#10150
0!
#10200
1!
#10250
0!
#10300
1!
#10350
0!
#10400
1!
#10450
0!
#10500
1!
